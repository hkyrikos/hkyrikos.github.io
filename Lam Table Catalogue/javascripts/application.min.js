/*
* Spare Part Catalog HTML export
*
* Copyright (c) 2011 CHK24 Software GmbH
*
* IMPORTANT: if using google chrome and the catalog is on the local filesystem,
* you have to add the command-line-parameter -allow-file-access-from-files.
* (Issue 40787:	Local files doesn't load with Ajax: http://code.google.com/p/chromium/issues/detail?id=40787)
*
*/

var VERSION_NUMBER = '2.5.4';

var xml_catalog;

var catalog_id = 0;

var language = 'E';   //actual language

var actualId;
var actualSpan;

var watchlist = new WatchlistSet();   // Watchlist

var history_catalog = [];     // Item-History
var history_idx = 0;

var ie_search = [];   // higher search-performance for IE

// set this to true if you want to preload all images
var preload = false;

// set true if you wanna see the debug-outputs
var debug = false;

// if true, benchmark starts automatically on document.ready
var benchmark = false;

// Zwischenspeicher id fï¿½r dblClick
var idAfterClick = false;
var nameAfterClick = false;

// Zwischenspeicher beim Umschalten auf Codeliste
var oldCatHeight;
var oldCatDivHeight;
var codelistView = false;
var handleWidth = 6;

//var onQuickView = false;

// extend jQuery :)
jQuery.fn.disableTextSelect = function () {
    return this.each(function () {
        $(this).css({
            'MozUserSelect': 'none'
        }).bind('selectstart', function () {
            return false;
        }).mousedown(function () {
            return false;
        });
    });
};
jQuery.fn.enableTextSelect = function () {
    return this.each(function () {
        $(this).css({
            'MozUserSelect': ''
        }).unbind('selectstart').mousedown(function () {
            return true;
        }).mousedown(function () {
            return true;
        });
    });
};


// indexOf for IE < 9
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (elt /*, from*/) {
        var len = this.length >>> 0;

        var from = Number(arguments[1]) || 0;
        from = (from < 0)
         ? Math.ceil(from)
         : Math.floor(from);
        if (from < 0)
            from += len;

        for (; from < len; from++) {
            if (from in this &&
          this[from] === elt)
                return from;
        }
        return -1;
    };
}

function getInternetExplorerVersion()
// Returns the version of Windows Internet Explorer or a -1
// (indicating the use of another browser).
{
    var rv = -1; // Return value assumes failure.
    if (navigator.appName == 'Microsoft Internet Explorer') {
        var ua = navigator.userAgent;
        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
        if (re.exec(ua) != null)
            rv = parseFloat(RegExp.$1);
    }
    return rv;
}

/**
* document.ready
*/
$(function () {


    // version number
    $('#info').html('Sparepart Catalog HTML &copy; ' + new Date().getFullYear() + ' by <a href="http://www.chk24.com">CHK24 Software</a> | v' + VERSION_NUMBER);

    // show the debug-console?
    if (debug) $("#log").show();

    // load all available catalogs from catalogs.xml
    loadCatalogsE();

    //$("#rightCodelist").hide();

    // dynamic heights
    $(window).resize(function () {
        resize();
    });


    // preload loader images
    var img = new Image();
    img.src = "images/loader.gif";
    img.src = "images/loader_small.gif";

    // image not found
    $("#image").error(function () {
        $(this).hide();
    });

    // thumbnail not found
    $("#thumbnail").error(function () {
        $(this).css("visibility", "hidden");
    });
    $("#clThumbnail").error(function () {
        $(this).css("visibility", "hidden");
    });
    // quickview hover
    $("#quickview").mouseenter(function () {
        onQuickView = true;
    });
    // quickview leave
    $("#quickview").mouseleave(function () {
        onQuickView = false;
        $("#quickview").hide();
    });


    // --------- MENU

    // tooltips
    $("#top > div").tipTip({ delay: 100 });

    // history: back
    $("#goBack").click(function () {
        if (history_idx != 0) {
            history_idx--;
            loadImage($("#" + history_catalog[history_idx]), false);
        }
    });

    // history: forward
    $("#goForward").click(function () {
        if (history_idx != history_catalog.length - 1) {
            history_idx++;
            loadImage($("#" + history_catalog[history_idx]), false);
        }
    });

    // parent
    $("#showParent").click(function () {
        showParent();
    });

    // catalogs on cd
    $("#toggleCatalogs").click(function () {
        if (codelistView)
            return;
        var ver = getInternetExplorerVersion();

        if ($("#catalogs_div").is(":visible")) {
            $("#handleUD").css("visibility", "hidden");
            if (ver > -1 && ver < 9.0)
                $("#machine_div").css("top", -7);
            else
                $("#machine_div").css("top", 0);
        }
        if (!$("#catalogs_div").is(":animated")) $("#catalogs_div").slideToggle("medium", function () {
            if ($("#catalogs_div").is(":visible")) {
                $("#handleUD").css("visibility", "visible");
                if (ver > -1 && ver < 9.0)
                    $("#machine_div").css("top", -1);
                else
                    $("#machine_div").css("top", 6);
            }
            resize();
        });
    });
    // cat_id
    $("#showParent")

    //Deutsch
    $("#German").click(function () {
        language = "D";
        loadCatalogsD();
    });
    // Englisch
    $("#English").click(function () {
        language = "E";
        loadCatalogsE();
    });
    // show watchlist
    $("#showWatchlist").click(function () {
        window.open("watchlist.html", "_blank", "width=750,height=327,scrollbars=yes");
    });


    // show Codelist
    $("#showCodelist").click(function () {
        //alert(language);
        window.open("sparepartlist.html", "_blank", "width=1024,height=768,menubar=1,resizable=1,scrollbars=no");
    });

    /*if (codelistView)
    return;

    codelistView = true;
    $("#machine_div").hide();
    $("#handleUD").hide();
    $("#right").hide();
    $("#rightCodelist").show();

    oldCatDivHeight = $("#catalogs_div").css("height");
    oldCatHeight = $("#catalogs").css("height");
    $("#catalogs_div").css("height", $("#left").height() - 18 + "px");
    $('#catalogs').css('height', $("#left").height() - (18 + 17) + "px");

    if (language == "E")
    loadCatalogsE(false);
    else
    loadCatalogsD(false);
    });*/




    // show search
    $("#showSearch").click(function () {
        window.open("search.html", "_blank", "width=740,height=290,scrollbars=yes");
    });

    // show print
    $("#showPrint").click(function () {
        window.open("print.html", "_blank", "width=740,height=500,scrollbars=yes");
    });

    /*
    * handle - resizing columns
    */
    $('#handle').mousedown(function () {
        //$(document).disableTextSelect();
        $(document).bind('mousemove', onMoveHandle);
        $(document).bind('mouseup', onLeaveHandle);
    });
    var onMoveHandle = function (event) {
        var x = event.pageX;

        if (x < 0 || x > $(window.document).width() - 10)
            return false;

        handleWidth = 2;
        $('#left').css('width', x);
        $('#handleUD').css('width', x);
        $('#handle').css('left', x);
        $('#right').css('left', x + 1);
        //$('#rightCodelist').css('left', x + 1);
        //$("#rightCodelist").css("width", $(window.document).width() - $("#left").width() - handleWidth + "px");
        return false;
    }
    var onLeaveHandle = function () {
        $(document).unbind('mousemove', onMoveHandle);
        $(document).unbind('mouseup', onLeaveHandle);
        //$(document).enableTextSelect();
    }

    /*
    * handleUP - resizing rows
    */

    $("#tree").css("height", ($("#tree").height() - 5));

    $('#handleUD').mousedown(function () {
        //$(document).disableTextSelect();
        $(document).bind('mousemove', onMoveHandleUD);
        $(document).bind('mouseup', onLeaveHandleUD);
    });
    var onMoveHandleUD = function (event) {
        var y = event.pageY;
        var topHeight = document.getElementById('top').clientHeight;

        if (y < topHeight + 19 || y > $(window.document).height() - 20)
            return false;

        $('#catalogs_div').css('height', y - topHeight - 15);
        $('#catalogs').css('height', y - topHeight - 32);


        $("#tree").css("height", ($("#left").height() - y));

        return false;
    }
    var onLeaveHandleUD = function () {
        $(document).unbind('mousemove', onMoveHandleUD);
        $(document).unbind('mouseup', onLeaveHandleUD);
        //$(document).enableTextSelect();
    }


    /*
    * keyboard-navigation
    */
    $(document).keyup(function (event) {

        // left
        if (event.keyCode == 37) {
            $(actualSpan).click();
        }

        // right
        if (event.keyCode == 39) {
            $(actualSpan).click();
        }

        // up
        if (event.keyCode == 38) {

            // is there a li-element on the same level?
            if (typeof ($(actualSpan).parent().prev("li").attr("id")) != "undefined") {
                loadImage($(actualSpan).parent().prev("li"));

                // TODO: opened parent
                //} else if () {


                // goto parent
            } else {
                if (typeof ($(actualSpan).parents("ul:visible:first").parent("li").attr("id")) == "undefined") return;
                loadImage($(actualSpan).parents("ul:visible:first").parent("li"));
            }

        }

        // down
        if (event.keyCode == 40) {

            // is there any child-li?
            if (typeof ($(actualSpan).parent().children("ul:visible:first").children("li:first").attr("id")) != "undefined") {
                loadImage($(actualSpan).parent().children("ul:visible:first").children("li:first"));

                // is there a li-element on the same level?
            } else if (typeof ($(actualSpan).parent().next("li").attr("id")) != "undefined") {
                loadImage($(actualSpan).parent().next("li"));

                // goto parents next
            } else {

                var elem = $(actualSpan).parents("ul:visible:first").parent("li");

                log($(actualSpan).parentsUntil("ul:visible:last").parent("li").attr("id"));

                if (typeof ($(actualSpan).parents("ul:visible:first").parent("li").next("li").attr("id")) == "undefined") return;
                loadImage($(actualSpan).parents("ul:visible:first").parent("li").next("li"));
            }

        }

    });

    var ver = getInternetExplorerVersion();
    if (ver > -1 && ver < 9.0) {
        $("#machine_div").css("top", -1);
    }
    else {
        $("#machine_div").css("top", 6);
        $("#mSpan").css("top", -5);
    }


});






/**
* loadCatalogs()
*
* Diese Funktion lï¿½dt die verfï¿½gbaren Kataloge aus catalogs.xml und zeigt
* diese im #catalogs-div an
*/
function loadCatalogsE() {
    var start = new Date().getTime();

    var catalogs;
    var cat_id;
    var description;
    var i = 0;

    $("#catalogs").html("");

    //alert($.browser);

    jQuery.ajax({
        type: "GET",
        dataType:  ($.browser.msie) ? "text" : "xml",
        url: "catalogs.xml",

        success: function (data, status) {
            
            if (typeof data == "string") {
                catalogs = new ActiveXObject("Microsoft.XMLDOM");
                catalogs.async = false;
                catalogs.loadXML(data);
                
            } else {
                catalogs = data;
            }

            i = 0;
            $(catalogs).find("catalog").each(function () {

                description = $(this).attr("description") || "";
                if (!codelistView)
                    $("#catalogs").append("<div class=\"catalog\" title=\"" + description + "\" id=\"cat_" + $(this).attr("id") + "\">" + $(this).text().split("_")[0] + " / " + $(this).attr("id") + "</div>");
                else {
                    $("#catalogs").append("<div class=\"catalogCL\" title=\"" + description + "\" id=\"cat" + $(this).attr("id") + "\"><table cellspacing=\"0\" cellpadding=\"0\"><tr><td width=\"17\"><input type=\"checkbox\" id=\"catCB" + i + "\" name=\"" + $(this).attr("id") + "\" checked=\"true\" /></td><td>" + $(this).text().split("_")[0] + " / " + $(this).attr("id") + "</td></tr></table></div>");
                    i = i + 1;
                }
            });

            // bind click-listeners
            $(".catalog").click(function () {

                cat_id = $(this).attr("id").replace("cat_", "");
                // hier wird die aktuelle ID schon festgelegt
                var docID = cat_id

                $(".catalog").removeClass("active");
                $(this).addClass("active");
                setCatalogE(cat_id, $(this).text());
                //docs(docID, "E", cat_id);
            });

            // auto-load first catalog
            //alert('x');
            $(".catalog").first().click();


            window.setTimeout("refreshImg()", 50);

            resize();


            //refresh();

            customer_catalogs_loaded();

        }
    });



    //alert(document.getElementById("catalogs_div").offsetHeight);
    //alert($("#catalogs_div").css("height") + "-" + $(window.document).height());


    var end = new Date().getTime();

    log("loadCatalogs: " + (end - start) + "ms");
}

function refreshImg() {
    $('#image').show();

    if ($("#catalogs_div").height() > $(window.document).height() / 2 && !codelistView) {
        $("#catalogs_div").css("height", ($(window.document).height() / 2) - 16 + "px");
        $("#catalogs").css("height", ($(window.document).height() / 2) - 16 - 17 + "px");

        $("#tree").css("height", ($("#left").height() - ($(window.document).height() / 2)) - 45 + 16);
    }
}


String.prototype.endsWith = function (str) { return (this.match(str + "$") == str) }

function docs(docID, sprache, grpID) {

    /*var url1 = "./data/img_"+docID+"/docs/documents.php";
    var myIFrame = document.getElementById('iFrameDocs');
    myIFrame.src = url1;*/

    var dl = document.getElementById('docList');
    dl.innerHTML = "";
    var docTab = "";
    var xmlDocs;

    jQuery.ajax({
        type: "GET",
        url: "data/img_" + docID + "/docs/docs.xml",
        dataType: ($.browser.msie) ? "text" : "xml",
        success: function (data, status) {
            if (typeof data == "string") {
                xmlDocs = new ActiveXObject("Microsoft.XMLDOM");
                xmlDocs.async = false;
                xmlDocs.loadXML(data);
            } else {
                xmlDocs = data;
            }
            docTab += "<table cellspacing='5' style='layout:fixed;'>";

            $(xmlDocs).find("Docs").each(function () {
                var name = $(this).attr("Name");
                var fileName = $(this).attr("File");
                var extension = fileName.substring(fileName.lastIndexOf(".") + 1);
                if ((($(this).attr("Lang") == "1" && sprache == "D") || ($(this).attr("Lang") == "2" && sprache == "E")) && grpID == $(this).attr("MatNr")) {
                    docTab += "<tr><td>";
                    docTab += "<a class='docs' target='_blank' href='data/img_" + docID + "/docs/" + fileName + "'><img border='0' src='" + getIconPath(extension) + "'>" + "</img></a>";
                    docTab += "</td><td>";
                    docTab += "<a class='docs' target='_blank' href='data/img_" + docID + "/docs/" + fileName + "'>" + name + "</a>";
                    docTab += "</td></tr>";
                }
            });
            docTab += "</table>";
            dl.innerHTML = docTab;
        }
    });

}

function getIconPath(extension) {
    extension = extension.toLowerCase();
    if (extension == "pdf")
        return "images/fileIcons/pdf.png";
    else if (extension == "dwg")
        return "images/fileIcons/dwg.png";
    else if (extension == "doc")
        return "images/fileIcons/doc.png";
    else if (extension == "docx")
        return "images/fileIcons/docx.png";
    else if (extension == "tif" || extension == "tiff" || extension == "bmp")
        return "images/fileIcons/tif.png";
    else if (extension == "jpg" || extension == "jpeg")
        return "images/fileIcons/jpg.png";
    else if (extension == "png")
        return "images/fileIcons/png.png";
    else if (extension == "txt")
        return "images/fileIcons/txt.png";
    else
        return "images/fileIcons/unknown.png";
}
/**
* setCatalog(id, name)
*
* Lï¿½dt den Katalog mit der ï¿½bergebenen ID
*
* @param id Die ID des Kataloges aus catalogs.xml. Diese ist dann der Dateiname des zu ï¿½ffnenden Kataloges.
* @param name Die Bezeichnung des Kataloges. Diese wird in #catalog-div angezeigt.
*/
function setCatalogE(id, name) {

    var start = new Date().getTime();

    catalog_id = id;

    $("#tree").hide();
    $("#tree").html("");

    $("#wrap_image").hide();
    $("#item_addtowatchlist").hide();

    $('#assembly .title').html("Assembly");

    $("#loader").show();

    // reset the watchlist
    // watchlist = [];
    // watchlist_count = [];
    //$("#addtowatchlist").html("Add to Watchlist<br/>(0 Items)");
    //$("#item_addtowatchlist").html("Add to Watchlist<br/><input id='bWLAdd' type='button' value='+'/>&nbsp;x&nbsp;<input id='bWLRem' type='button' value='-'/>&nbsp;&nbsp;&nbsp;(0 Items)");
    //$("#wlCounter").html("0");
    //$("#wlItems").html("(0 Items)");



    // reset history
    history_catalog = [];
    history_idx = 0;

    jQuery.ajax({
        type: "GET",
        dataType: ($.browser.msie) ? "text" : "xml",
        //Sprache Teil 1
        url: "data/" + id + "_E.xml",


        success: function (data, status) {

            if (typeof data == "string") {
                xml_catalog = new ActiveXObject("Microsoft.XMLDOM");
                xml_catalog.async = false;
                xml_catalog.loadXML(data);
            } else {
                xml_catalog = data;
            }

            parseCatalog(xml_catalog);

            // build tree
            $("#tree_root").treeview({
                collapsed: true,
                persist: "location"
            });

            $("#loader").hide();
            $("#tree").show();

            // rebind click listeners in the tree
            $(".item").click(function () {
                loadImage($(this).parent());
            });

            customer_catalog_opened();

            // load first element
            $(".item", "#tree").first().click();

            if (benchmark) startBenchmark();

        }

    });

    var end = new Date().getTime();

    log("setCatalog: " + (end - start) + "ms");

    ;
}


//Katalog auf Deutsch

function loadCatalogsD() {

    var start = new Date().getTime();

    var catalogs;
    var cat_id;
    var description;
    var i = 0;

    $("#catalogs").html("");
    
    if (codelistView) {
        var str = "";
        str += "<table><tr><td>";
        str += "<input type=\"button\" id=\"bCatCheckAll\" class=\"filterButton\" value=\"All\" />";
        str += "</td><td>";
        str += "<input type=\"button\" id=\"bCatCheckNone\" class=\"filterButton\" value=\"None\" />";
        str += "</td></tr></table>";
        $("#catalogs").append(str);

        $("#bCatCheckAll").click(function () {
            for (i = 0; $("#catCB" + i).attr("Name") != undefined; i++) {
                $("#catCB" + i).attr("checked", true);
            }
        });
        $("#bCatCheckNone").click(function () {
            for (i = 0; $("#catCB" + i).attr("Name") != undefined; i++) {
                $("#catCB" + i).attr("checked", false);
            }
        });
    }
    jQuery.ajax({
        type: "GET",
        dataType: ($.browser.msie) ? "text" : "xml",
        url: "catalogs.xml",

        success: function (data, status) {

            if (typeof data == "string") {
                catalogs = new ActiveXObject("Microsoft.XMLDOM");
                catalogs.async = false;
                catalogs.loadXML(data);
            } else {
                catalogs = data;
            }

            i = 0;
            $(catalogs).find("catalog").each(function () {
                description = $(this).attr("description") || "";
                if (!codelistView)
                    $("#catalogs").append("<div class=\"catalog\" title=\"" + description + "\" id=\"cat_" + $(this).attr("id") + "\">" + $(this).text().split("_")[0] + " / " + $(this).attr("id") + "</div>");
                else
                    $("#catalogs").append("<div class=\"catalogCL\" title=\"" + description + "\" id=\"cat_" + $(this).attr("id") + "\"><table cellspacing=\"0\" cellpadding=\"0\"><tr><td width=\"17\"><input type=\"checkbox\" id=\"catCB" + i + "\" name=\"" + $(this).attr("id") + "\" checked=\"true\" /></td><td>" + $(this).text().split("_")[0] + " / " + $(this).attr("id") + "</td></tr></table></div>");
                i = i + 1;
            });

            // bind click-listeners

            $(".catalog").click(function () {

                cat_id = $(this).attr("id").replace("cat_", "");
                // hier wird die aktuelle ID schon festgelegt

                var docID = cat_id

                $(".catalog").removeClass("active");
                $(this).addClass("active");
                setCatalogD(cat_id, $(this).text());

                //docs(docID, "D", cat_id);
            });

            // auto-load first catalog
            $(".catalog").first().click();


            resize();

            customer_catalogs_loaded();

        }
    });

    var end = new Date().getTime();

    log("loadCatalogs: " + (end - start) + "ms");
}


function setCatalogD(id, name) {

    var start = new Date().getTime();

    catalog_id = id;

    $("#tree").hide();
    $("#tree").html("");

    $("#wrap_image").hide();
    $("#item_addtowatchlist").hide();

    $('#assembly .title').html("Assembly");

    $("#loader").show();

    // reset the watchlist
    //  watchlist = [];
    //  watchlist_count = [];
    //  $("#addtowatchlist").html("Add to Watchlist<br/>(0 Items)");
    //  //$("#item_addtowatchlist").html("Add to Watchlist<br/>(0 Items)");
    //  $("#wlCounter").html("0");
    //  $("#wlItems").html("(0 Items)");

    // reset history
    history_catalog = [];
    history_idx = 0;

    jQuery.ajax({
        type: "GET",
        dataType: ($.browser.msie) ? "text" : "xml",
        //Sprache Teil 1
        url: "data/" + id + "_D.xml",

        success: function (data, status) {

            if (typeof data == "string") {
                xml_catalog = new ActiveXObject("Microsoft.XMLDOM");
                xml_catalog.async = false;
                xml_catalog.loadXML(data);
            } else {
                xml_catalog = data;
            }

            parseCatalog(xml_catalog);

            // build tree
            $("#tree_root").treeview({
                collapsed: true,
                persist: "location"
            });

            $("#loader").hide();
            $("#tree").show();

            // rebind click listeners in the tree
            $(".item").click(function () {
                loadImage($(this).parent());
            });

            customer_catalog_opened();

            // load first element
            $(".item", "#tree").first().click();

            if (benchmark) startBenchmark();

        }

    });

    var end = new Date().getTime();

    log("setCatalog: " + (end - start) + "ms");
}

/**
* parseCatalog(xml)
*
* Baut aus der Katalog-xml den Tree auf
*
* @param xml Das xml-Dokument als String
*/
function parseCatalog(xml) {

    var tree = "";

    var id = "";
    var name = "";
    var description = "";

    var li_string = "";

    var level = 0;
    var oldLevel = -1;
    var diffLevel = 0;

    var root = true;

    ie_search = [];

    // alle items durchlaufen
    $(xml).find("stk").each(function () {

        id = $(this).attr("id");
        name = $(this).attr("name");
        materialnr = $(this).attr("materialnr");
        pos = $(this).attr("pos") + " ";
        description = $(this).attr("description");
        et = $(this).attr("ET");


        // build an array for a higher search performance in IE
        if ($.browser.msie) {
            ie_search.push(id + "|" + materialnr + "|" + pos + name);
        }

        if (pos == "undefined ") pos = "";

        // preload image
        if (preload) {
            var img = new Image();
            img.src = "data/img_" + catalog_id + "/" + materialnr + ".jpg";
        }

        //li_string = "<li id=\"" + id.replace(/\./gi, "_") + "\" data-materialnr=\"" + materialnr + "\"><span class=\"item\">" + pos + name + "</span>";
        li_string = "<li id=\"" + id + "\" data-materialnr=\"" + materialnr + "\" data-description=\"" + description + "\"><span id=\"sp" + id + "\"  class=\"item\">&nbsp;" + pos + name + "&nbsp;|&nbsp;" + materialnr + "&nbsp;[" + et + "]</span>";

        level = id.split("_").length;

        // Level ist tiefer - neue <ul> (z.B. von 1.1 auf 1.1.1)
        if (level > oldLevel) {

            if (root) {
                tree += "<ul id=\"tree_root\" class=\"treeview-catalog\">" + li_string;
                root = false;
            } else {
                tree += "<ul>" + li_string;
            }

            // Level ist hï¿½her - </ul> bis altes Level erreicht (z.B. von 1.1.1 auf 1.2)
        } else if (level < oldLevel) {

            tree += "</li>";

            diffLevel = oldLevel - level;
            for (i = 0; i < diffLevel; i++) tree += "</ul></li>";

            tree += li_string;

            // Level bleibt gleich
        } else {

            sameLevel = true;
            tree += "</li>" + li_string;

        }

        oldLevel = level;

    });

    tree += "</li>";

    diffLevel = oldLevel - 1;
    for (i = 0; i < diffLevel; i++) tree += "</ul></li>";
    $("#tree").html(tree);

}




/**
*
*/
function loadImage(liElement, pushToHistory) {
    
    // determines, if this step should be added to the history
    if (typeof (pushToHistory) == "undefined") pushToHistory = true;

    var start = new Date().getTime();

    $('#image').show();
    $('#wrap_image').show();

    // reset the parts-title
    $('#parts .title').html("Parts");
    $('#parts #name').html("");

    $("#quickview").hide();
    $("#item_addtowatchlist").show();

    var id = $(liElement).attr("id");
    var materialnr = $(liElement).attr("data-materialnr");
    var description = $(liElement).attr("data-description");

    if (description == "undefined")
        description = "";

    $("#description").html(description);

    docs(catalog_id, language, materialnr);
    //if (actualId == id) return;

    // add to history
    if (pushToHistory) {
        history_catalog.push(id);
        history_idx = history_catalog.length - 1;
    }

    //$('#image').hide();

    $(actualSpan).css({
        'background-color': '#fff',
        'color': '#000'
    });

    actualSpan = $(liElement).children("span");
    actualId = id;

    $(actualSpan).css({
        'background-color': '#F8CF4E',
        'color': '#000'
    });

    // load the new image
    $('#image').attr("src", "data/img_" + catalog_id + "/" + materialnr + ".jpg");
    //$('#image').attr("alt", materialnr);

    // set the assembly-title
    $('#assembly .title').html(materialnr + " / " + $(actualSpan).html().slice($(actualSpan).html().indexOf(" ", 1), $(actualSpan).html().length).split("|")[0]);
    linkcosmic(materialnr)
    wkcosmic(materialnr)
    $('#assembly .matnr').html(materialnr)
    //797 cosmic
    //wk ist ID fï¿½r warenkorb

    function linkcosmic(materialnr) {
        urlpart1 = "../../../../../htm/function.asp?ID=110&Par1=";
        urlpart2 = "&Par2=1";
        urlcompl = urlpart1 + materialnr + urlpart2;

    };

    function wkcosmic(materialnr) {
        urlpart3 = "../../../../../htm/function.asp?ID=111&Par1="
        urlpart4 = "&Par2=1"
        urlcompl2 = urlpart3 + materialnr + urlpart4;

    };

    //idAfterClick = id;
    idAfterClick = materialnr;
    nameAfterClick = $(actualSpan).html();

    var itm = watchlist.getLength() == 1 ? "Item" : "Items";

    $("#wlItems").html("(" + watchlist.getLength() + " " + itm + ")");
    if (watchlist.Contains(materialnr))
        $("#wlCounter").html(watchlist.getItem(materialnr).count);
    else
        $("#wlCounter").html("0");


    // unbind the old add-to-watchlist-functionality
    $("#bWLAdd").unbind("click");
    //$("#bWLAdd").unbind("dblclick");
    // rebind :)

    $("#bWLAdd").click(bWLAdd_Event);
    //$("#bWLAdd").dblclick(bWLAdd_Event);

    function bWLAdd_Event() {
        if (!watchlist.Contains(idAfterClick)) {
            log(idAfterClick + " added to watchlist");
            var wlItem = new WatchlistItem(idAfterClick, catalog_id, nameAfterClick);
            watchlist.Add(wlItem);
            // send to customer-interface
            //watchlist_updated();
        }
        else {
            watchlist.getItem(idAfterClick).count++;
        }
        
        var itm = watchlist.getLength() == 1 ? "Item" : "Items";
        
        $("#addtowatchlist").html("Add to Watchlist<br/>(" + watchlist.getLength() + " " + itm + ")");
        //$("#item_addtowatchlist").html("Add to Watchlist<br/>(" + watchlist.length + " " + itm + ")");
        $("#wlItems").html("(" + watchlist.getLength() + " " + itm + ")");
        $("#wlCounter").html(watchlist.getItem(idAfterClick).count);
        
        //watchlist.PrintWL();
    }


    // unbind the old add-to-watchlist-functionality
    $("#bWLRem").unbind("click");
    //$("#bWLRem").unbind("dblclick");
    // rebind :)
    $("#bWLRem").click(bWLRem_Event);
    //$("#bWLRem").dblclick(bWLRem_Event);

    function bWLRem_Event() {
        if (watchlist.Contains(idAfterClick)) {
            if (watchlist.getItem(idAfterClick).count == 1) {
                watchlist.Remove(idAfterClick);
            }
            else
                watchlist.getItem(idAfterClick).count--;
        }
        var itm = watchlist.getLength() == 1 ? "Item" : "Items";
        $("#addtowatchlist").html("Add to Watchlist<br/>(" + watchlist.getLength() + " " + itm + ")");
        //$("#item_addtowatchlist").html("Add to Watchlist<br/>(" + watchlist.length + " " + itm + ")");
        $("#wlItems").html("(" + watchlist.getLength() + " " + itm + ")");
        if (watchlist.Contains(idAfterClick))
            $("#wlCounter").html(watchlist.getItem(idAfterClick).count);
        else
            $("#wlCounter").html(0);

        //watchlist.PrintWL();
    }

    /*$("#item_cosmic").click(function() {
    if (jQuery.inArray(id, watchlist) == -1) {
    log(id + " added to watchlist");
    watchlist.push(id);
    watchlist_count.push(1);
    var itm = watchlist.length == 1 ? "Item" : "Items";
    $("#addtowatchlist").html("blat<br/>(" + watchlist.length + " " + itm + ")");
    $("#item_cosmic").html("cosmict<br/>(" + watchlist.length + " " + itm + ")");
    // send to customer-interface
    //watchlist_updated();
    }
    }); */
    var end = new Date().getTime();

    log("loadImage: " + (end - start) + "ms");

    //$('#image').show();

    // load Maps
    loadMaps(id);

    customer_maps_loaded();


    /* COSMIC Warenkorb
    function redirectcosmicinfo(){
    alert("1")
    alert(materialnr)
    parent.parent.location = "../../../../../htm/function.asp?ID=110&Par1=" + materialnr + "&Par2=1";
	  
    }

    function redirectcosmicwk()	{
    alert ("2")
    alert (materialnr)
    parent.parent.location = "../../../../../htm/function.asp?ID=111&Par1=" + materialnr + "&Par2=1";
	
    }
    */


}



/**
*
*/
function loadMaps(id) {

    var start = new Date().getTime();

    var material;
    var top, left, width, height;
    var offset_x;
    var full_offset_left;
    var full_offset_top;

    var positions;
    var last_position;

    var ref;

    var id;
    var references;
    var positions_id;
    var next_id;
    var prev_id;

    var map_count;
    var ref_count;

    var ref_elements;

    // some static offsets for map positioning
    var map_offset_top = 75;
    var map_offset_left = 55;

    // remove all old maps, positions and prev/next-divs first
    $("#wrap_image .map").remove();
    $("#wrap_image .positions").remove();
    $("#wrap_image .prevpos").remove();
    $("#wrap_image .nextpos").remove();

    // find stk with the given id in xml file
    //$(xml_catalog).find("stk[id='" + id.replace(/\_/gi, ".") + "']").each(function() {
    $(xml_catalog).find("#" + id).each(function () {

        map_count = 0;

        // find all maps in the actual stk
        $(this).find("map").each(function () {

            map_count++;
            ref_count = 0;

            // get map position
            left = parseInt($(this).attr("x")) + map_offset_left;
            top = parseInt($(this).attr("y")) + map_offset_top;
            width = $(this).attr("w");
            height = $(this).attr("h");



            // build the positions-string and the references separated by '-' (e.g. 1.1-1.2-1.3)
            positions = "";
            ref = "";
            $(this).find("ref").each(function () {
                ref_count++;

                if (positions != "") positions += ", ";
                positions +=
          typeof ($(this).attr("pos")) == "undefined"
            ? ""
            : ref_count == 1
              ? "<span style='text-decoration:underline;'>" + $(this).attr("pos") + "</span>"
              : $(this).attr("pos");

                if (ref == "") ref = $(this).text();
                else ref += "-" + $(this).text();
            });

            // if there are no refs, just display the map
            if (ref_count == 0) {
                positions = "";
                ref = "";
            }

            // build unique IDs (e.g. object_1_1-1_2-1_3) (used in attr data-ref)
            id = ref.replace(/\./gi, "_");
            references = "ref_" + id;
            positions_id = "positions_" + map_count;
            next_id = "nextpos_" + map_count;
            prev_id = "prevpos_" + map_count;

            // string for switching between positions
            if (ref_count <= 1) ref_elements = "";
            else ref_elements = "<div class=\"prevpos\" id=\"" + prev_id + "\">&lt;</div><div class=\"nextpos\" id=\"" + next_id + "\">&gt;</div>";

            // add map and positions
            $("#wrap_image").append("<div class=\"map\" id=\"map_" + map_count + "\" data-ref=\"" + references + "\"></div><div class=\"positions\" id=\"" + positions_id + "\">" + positions + "</div>" + ref_elements + "<div class=\"ref_count\" style=\"display:none;\">0/" + (parseInt(ref_count) - 1) + "</div>");

            //alert("<div class=\"map\" id=\"map_" + map_count + "\" data-ref=\"" + references + "\"></div><div class=\"positions\" id=\"" + positions_id + "\">" + positions + "</div>" + ref_elements + "<div class=\"ref_count\" style=\"display:none;\">0/" + (parseInt(ref_count) - 1) + "</div>");
            //$(".prevpos").hide();
            //$(".nextpos").hide();

            // red background, if map not linked
            if (ref_count == 0) $("#map_" + map_count).addClass('nolink');
            else if (ref_count > 1) $("#map_" + map_count).addClass('multiref');

            // align map-div
            $("#map_" + map_count).css({
                'top': top + 'px',
                'left': left + 'px',
                'width': width + 'px',
                'height': height + 'px'
            });


            //-----------------------------------------------------------------------------------------
            // bind the mousemove-listener: get the materialnr of the map-id and display its thumbnail
            $("#map_" + map_count).mouseleave(function () {
                $("#quickview").hide();
            });

            $("#map_" + map_count).mouseenter(function () {

                $(".prevpos").hide();
                $(".nextpos").hide();

                //$("#thumbnail").show();
                //$("#addtowatchlist").show();

                var ref_now = $(this).next(".positions").nextAll(".ref_count:first").html().split("/")[0];

                // remove all spans and add it to the actual position
                var positions = $(this).next(".positions").text().split(", ");

                for (var i = positions.length - 1; i >= 0; i--) {
                    positions[i].replace("<span style='text-decoration:underline;'>", "").replace("</span>", "");
                    if (i == ref_now) positions[i] = "<span style='text-decoration:underline;'>" + positions[i] + "</span>";
                }

                $(this).next(".positions").html(positions.join(", "));

                // get the references and load the actual thumbnail
                var refs = $(this).attr("data-ref").replace("ref_", "").split("-");

                // if no references, do nothing
                if (refs == "") return;

                // find the materialnr
                //var materialnr = $("#tree").find("li[id='" + refs[ref_now] + "']").attr("data-materialnr");
                var materialnr = $("#tree").find("#" + refs[ref_now]).attr("data-materialnr");

                var id = refs[ref_now];
                var spanElem = $("#tree").find("li[id='" + id + "']").children("span");



                /* unbind the old add-to-watchlist-functionality
                $("#addtowatchlist").unbind("click");
                // rebind :)
                $("#addtowatchlist").click(function() {
                if (jQuery.inArray(id, watchlist) == -1) {
                log(id + " added to watchlist");
                watchlist.push(id);
                watchlist_count.push(1);
                var itm = watchlist.length == 1 ? "Item" : "Items";
                $("#addtowatchlist").html("Add to Watchlist<br/>(" + watchlist.length + " " + itm + ")");
                $("#item_addtowatchlist").html("Add to Watchlist<br/>(" + watchlist.length + " " + itm + ")");
                // send to customer-interface
                //watchlist_updated();
                }
                });
                */


                // set the parts-title

                $('#parts .title').html("Article Number: " + materialnr);
                $('#parts #name').html($(spanElem).html().slice($(spanElem).html().indexOf(" ", 1), $(spanElem).html().length).split("|")[0]);

                // set thumbnail picture
                $("#thumbnail").css("visibility", "visible");
                $('#thumbnail').attr("src", "data/img_" + catalog_id + "/" + materialnr + "_ai.jpg");

                // positionate and show the quickview
                $("#quickview").css("top", parseInt($(this).css("top").replace("px", "")) + parseInt($(this).css("height").replace("px", "")) + 10 + "px");
                $("#quickview").css({
                    'left': ($(this).css("left").replace("px", "") - ($("#quickview").width() - $(this).css("width").replace("px", "")) / 2) + 'px'
                });

                $("#quickview").show();

                var id = $(this).attr("id").split("_")[1];
                $("#prevpos_" + id).show();
                $("#nextpos_" + id).show();
            });


            //-----------------------------------------------------------------------------------------
            // bind the onclick-listener: 
            $("#map_" + map_count).click(function () {

                var ref_now = $(this).next(".positions").nextAll(".ref_count:first").html().split("/")[0];
                var refs = $(this).attr("data-ref").replace("ref_", "").split("-");

                // if no references, do nothing
                if (refs == "") return;

                var id = refs[ref_now];
                var parentID = id.substring(0, id.lastIndexOf("_"));
                
                if ($("#" + id).parent().css("display") == "none")
                    $("#sp" + parentID).click();

                loadImage($("#tree").find("li[id='" + id + "']"));

            });


            // get the last position
            // save this referenece because it's called more times ;)
            last_position = $("#" + positions_id);


            // align positions-div
            // top padding is the map-height / 2 - the font size of the position-div / 2
            //alert($(last_position).css);

            var lpTop = top;
            var lpLeft = left;
            var lpWidth = width;
            var lpPTop = height / 2 - $(last_position).css("font-size").replace("px", "") / 2;
            if (lpPTop <= -1)
                lpPTop = -0.9

            //{'top':'1px','left':'1px','max-width':'1px','padding-top':'1px','padding-left':'1px'});
            //alert(lpPTop);

            $(last_position).css({
                'top': lpTop + 'px',
                'left': lpLeft + 'px',
                'max-width': lpWidth + 'px',
                'padding-top': lpPTop + 'px',
                'padding-left': '2px'
            });
            //alert('nach');
            // set the positions to the center of the map
            // (this has to be set here because the width was calculated in the css-transformation above)
            $(last_position).css({
                'left': (left - ($(last_position).width() - width) / 2) + 'px'
            });


            // align the prev/next - divs
            $("#" + prev_id).css({
                'top': (parseInt(top) - 15) + 'px',
                'left': left + 'px'
            });
            $("#" + next_id).css({
                'top': (parseInt(top) - 15) + 'px',
                'left': (parseInt(left) + 13) + 'px'
            });

            $(".prevpos").hide();
            $(".nextpos").hide();



            // bind click listener to the prev-button and disable its text-selection
            $("#" + prev_id).click(function () {

                var id = $(this).attr("id").replace("prevpos_", "");
                var ref_now = $(this).next(".nextpos").next(".ref_count").html().split("/")[0];
                var ref_count = $(this).next(".nextpos").next(".ref_count").html().split("/")[1];

                ref_now--;
                if (ref_now < 0) ref_now = ref_count;

                $(this).next(".nextpos").next(".ref_count").html(ref_now + "/" + ref_count);

                $("#map_" + id).mouseenter();
            });
            $("#" + prev_id).disableTextSelect();


            // bind click listener to the next-button and disable its text-selection
            $("#" + next_id).click(function () {

                var id = $(this).attr("id").replace("nextpos_", "");
                var ref_now = $(this).next(".ref_count").html().split("/")[0];
                var ref_count = $(this).next(".ref_count").html().split("/")[1];

                ref_now++;
                if (ref_now > ref_count) ref_now = 0;

                $(this).next(".ref_count").html(ref_now + "/" + ref_count);

                $("#map_" + id).mouseenter();
            });
            $("#" + next_id).disableTextSelect();

        });

    });

    var end = new Date().getTime();

    //$(".map").show();
    //$(".positions").show();

    log("loadMaps: " + (end - start) + "ms (" + map_count + " maps)");
    //log(end - start);

}

/*function clickMenu() {
    alert(document.getElementById("1_1").className);
    document.getElementById("1_1").className = "last";
    alert(document.getElementById("1_1").className);
}*/

//COSMIC	


/**
* jumps to the parent object
*/
function showParent() {
    if ($(actualSpan).parent().parent().parent().attr("id") == "tree") return;
    loadImage($(actualSpan).parent().parent().parent());
}




/**
* prints a log-message, if debug is set to true
*/
function log(message) {
    $("#log").append(message + "<br/>");
    $("#log").animate({ scrollTop: $("#log").attr("scrollHeight") - $('#log').height() }, 1);
}




/**
* small benchmark function, loads the first 2 elements over and over again
*/
function startBenchmark() {
    $("#log").html("");

    var repeat = 50;

    var benchmarkStart = new Date().getTime();

    for (var i = repeat; i > 0; i--) {

        loadImage($("#1"));

        loadImage($("#1_1"));

    }

    var benchmarkEnd = new Date().getTime();

    log("---<br/>Benchmark completed in " + (benchmarkEnd - benchmarkStart) + "ms");
}

/**
*
*/
function resize() {
    var catalogs_div_height = $("#catalogs_div").is(":visible") ? $("#catalogs_div").height() : 0;
    $("#top").css("width", $(window.document).width() + "px");
    $("#left").css("height", $(window.document).height() - parseInt($("#left").css("top").replace("px", "")) + "px");
    $("#handle").css("height", $(window.document).height() - parseInt($("#left").css("top").replace("px", "")) + "px");
    $("#machine_div").css("height", $("#left").height() - catalogs_div_height - 30 + "px");
    $("#tree").css("height", $("#left").height() - catalogs_div_height - 40 + "px");
    $("#tree").css("height", ($("#tree").height() - 5));
    $("#docList").css("width", $(window.document).width() - $("#left").width() - 20 + "px");
    $("#docList").css("height", $(window.document).height() - 570 + "px");
}
